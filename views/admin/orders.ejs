<%- include('../partials/admin-header.ejs') %>
<%- include('../partials/admin-sidebar.ejs') %>
<style>
    .product-img {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: 5px;
    }
    .status-badge {
        font-size: 0.9rem;
        padding: 5px 10px;
        border-radius: 12px;
    }
    .badge-delivered {
        background-color: #d4f4e0;
        color: #28a745;
    }
    .badge-canceled{
        background-color: #ede9fe;
        color: #bd4330;
    }
    .badge-shipping {
        background-color: #ede9fe;
        color: #6f42c1;
    }
    .invoice-btn {
        background-color: #6f42c1;
        color: white;
        border-radius: 8px;
        padding: 6px 12px;
    }
</style>
<div class="main-panel">
    <div class="content-wrapper">
      
    <div class="row">
        <div class="container">
           
        <% if(orders && orders.length>0){ %>
        <div class="container my-5">
            <h3 class="mb-4">Order History</h3>
            <div class="table-responsive">
                <table class="table align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Order ID</th>
                           
                            <th>Date</th>
                            <th>Total Amount</th>
                            <th>Payment Status</th>
                            <th>Status</th>
                           
                        </tr>
                    </thead>
                    <tbody>
                        <% orders.forEach((order)=>{ %>
                            <% order.items.forEach(item => {%>
                        <tr>
                            <td><%= order._id.toString().slice(-6) %></td>
                            
                            <td id="date"><%=order.formattedDate %></td>
                            <td>â‚¹ <%=Number(order.payableAmount).toFixed(2) %></td>
                            <td><%= order.paymentStatus===true ? "Paid":"Pending" %></td>
                            <td id="status">
                                <a href="/admin/orders/orderDetails/<%=order._id %>"><button class="btn btn-primary">view Details</button></a>
                               
                              
                            </td>
                         
                            
                        </tr>
                       
                        <%  });  }) %>
                    </tbody>
                </table>
            </div>
        </div>
        <% }  %>
        
        </div>
        </div>  
        <div class="w-100 d-flex justify-content-center mt-3">
            <nav aria-label="Page navigation">
              <ul class="pagination">
               
                <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                  <a class="page-link" href="?page=<%= currentPage - 1 %>" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                  </a>
                </li>
          
              
                <% for (let i = 1; i <= totalPages; i++) { %> 
                  <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                    <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                  </li>
                <% } %>
          
                <!-- Next button -->
                <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                  <a class="page-link" href="?page=<%= currentPage + 1 %>" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                  </a>
                </li>
              </ul>
            </nav>
          </div>
          
    </div>

  </div>
  <div class="modal fade" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="returnModalLabel">Return Request</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p><strong>Reason for return:</strong></p>
          <p id="returnReason"></p>
          <input type="hidden" id="product_Id">
          <input type="hidden" id="user_Id">
          <input type="hidden" id="order_Id">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-danger" onclick="rejectReturn()">Reject</button>
          <button type="button" class="btn btn-success" onclick="approveReturn()">Approve</button>
        </div>
      </div>
    </div>
  </div>
   <script>
    function openReturnModal(product_Id, user_Id, order_Id, returnReason) {
    document.getElementById('product_Id').value = product_Id;
    document.getElementById('user_Id').value = user_Id;
    document.getElementById('order_Id').value = order_Id;
    document.getElementById('returnReason').innerText = returnReason;
}

async function rejectReturn() {
    const product_Id = document.getElementById('product_Id').value;
    const user_Id = document.getElementById('user_Id').value;
    const order_Id = document.getElementById('order_Id').value;

    try {
        let response = await fetch(`/admin/orders/rejectReturn`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ product_Id, order_Id })
        });

        if (response.ok) {
            Swal.fire('Rejected', 'Return has been rejected.', 'success');
            setTimeout(() => window.location.reload(), 1500);
        } else {
            throw new Error('Failed to reject the return.');
        }
    } catch (error) {
        Swal.fire('Error', 'Something went wrong. Please try again later.', 'error');
    }
}

async function approveReturn() {
    const product_Id = document.getElementById('product_Id').value;
    const user_Id = document.getElementById('user_Id').value;
    const order_Id = document.getElementById('order_Id').value;

    try {
        let response = await fetch(`/admin/orders/approveReturn`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ product_Id, order_Id,user_Id })
        });

        if (response.ok) {
            Swal.fire('Approved', 'Return has been approved.', 'success');
            setTimeout(() => window.location.reload(), 1500);
        } else {
            throw new Error('Failed to approve the return.');
        }
    } catch (error) {
        Swal.fire('Error', 'Something went wrong. Please try again later.', 'error');
    }
}
    function delivery(product_Id, user_Id, order_Id) {
   
    Swal.fire({
        title: 'Are you sure?',
        text: "Do you want to mark this order as delivered?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, mark as delivered!'
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                let response = await fetch(`/admin/orders/deliver`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ product_Id, user_Id, order_Id })
                });

                if (response.ok) {
                    Swal.fire(
                        'Delivered!',
                        'The order has been marked as delivered.',
                        'success'
                    );
                    
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    throw new Error('Failed to update the order status.');
                }
            } catch (error) {
                console.error('Error:', error);
               
                Swal.fire(
                    'Error!',
                    'Something went wrong. Please try again later.',
                    'error'
                );
            }
        }
    });
}

    function cancel(product_Id, user_Id, order_Id) {
 
    Swal.fire({
        title: 'Are you sure?',
        text: "Do you want to cancel this order?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!'
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                let response = await fetch(`/admin/orders/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ product_Id, user_Id, order_Id }) 
                });

                if (response.ok) {
                    Swal.fire(
                        'Cancelled!',
                        'Order has been canceled.',
                        'success'
                    );

                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    throw new Error('Failed to cancel the order.');
                }
            } catch (error) {
                console.error('Error:', error);

                Swal.fire(
                    'Error!',
                    'Something went wrong. Please try again later.',
                    'error'
                );
            }
        }
    });
}

   </script>
  <%- include('../partials/admin-footer.ejs') %>